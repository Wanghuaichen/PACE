#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

:- use_module(library(time)).
:- use_module(library(process)).
	
about_atom(About) :-
        open('evostat.about', read, Handle),
	read_pending_input(Handle,FileContent,[]),
	atom_chars(About,FileContent).

repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
             repeat1(N).

repeat1(1) :- !.
repeat1(_).
repeat1(N) :- M is N-1, repeat1(M).

:- (current_prolog_flag(arch,'i386-win32')->BT=foreign(plblue);BT=plblue),
   load_foreign_library(BT), writeln('plblue (BLUETOOTH) loaded').


:- pce_begin_class(snapshot, label).

variable(imageDirectory, name, get, "Current Image Path" ).
variable(imageFile,      name, get, "Current Image Filename" ).
variable(width,  int, get, "Image size" ).
variable(height,  int, get, "Image size" ).

initialise(Self, Label:[name]) :->
	"Initialise the image area"::
        send_super(Self, initialise(Label)),
	send(Self, slot, imageFile, 'opencvlevel.jpg'),
	send(Self, slot, imageDirectory, './'),
	send(Self, slot, width, -1),
	send(Self, slot, height, -1).

imageFile(Self, File:[name])      :-> send(Self,slot,imageFile, File).

imageDirectory(Self, Path:[name]) :-> send(Self,slot,imageDirectory, Path).

size(Self, W:[int], H:[int]) :-> send(Self, slot, width, W),
	   	    	     	 send(Self, slot, height, H).

show(Self) :->
	get(Self, imageDirectory, Path),
	get(Self, imageFile, Filename),
	concat_atom([Path,Filename], Where),
	new(I, image(Where)),
	send(Self, selection, I).
:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(socket,  int, get, "Bluetooth Socket" ).
variable(btaddr, name, get, "Bluetooth MAC Address" ).
variable(reply, name, get, "Last Message from Device" ).

initialise(B, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(B, initialise(Label)),
	send(B, slot, socket, -1),
	send(B, slot, btaddr, discover),
	send(B, slot, imageFile, 'opencvlevel.jpg'),
	send(B, slot, imageDirectory, './'),
	send(B, slot, width, -1),
	send(B, slot, height, -1).

compute(_) :-> true.

size(Self, W:[int], H:[int]) :-> send(Self, slot, width, W),
	   	    	     	 send(Self, slot, height, H).

command(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply"::
        get(Self, socket, Socket),
	( bt_converse(Socket, Cmd, Reply)
	  -> send(Self, slot, reply, Reply)
	  ; send(Self, slot, reply, failed)
	).

btaddr(Self, Addr:[name]) :->
	send(Self, slot, btaddr, Addr),
	send(Self, connect).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, btaddr, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(Addr, BTSocket),
	( BTSocket > -1; sleep(1),fail ),
	!, % Don't need the cut, methods are deterministic
	send(Self, slot, socket, BTSocket).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

mac(Self, MAC:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, ip, ip(IP)).

bt(Self, BtAddr) :->
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(BtAddr,Socket),
	( Socket > -1; sleep(1),fail ),
	!,
	send(Self,slot,socket,Socket).

:- pce_end_class.


aristotle([
  cellstat(c5, right,
   [ btaddr('98:D3:31:70:2B:70'), temp(37.9), od(0.4), size(200,12)]),
  snapshot(c9, next_row, [ size(640,480) ]),
  lagoon(l1,  next_row,
   [ btaddr('98:D3:31:70:2B:70'), temp(37.9), od(0.4), size(200,12)]),
  lagoon(l2,  right,
   [ btaddr('98:D3:31:70:2B:70'), temp(37.9), od(0.4), size(200,12)]),
  pumps(p6, next_row,
   [ btaddr('98:D3:31:40:1D:A4'), size(5,5) ])
]).

buffon([
  ebutton(c5, right,
   [ btaddr('98:D3:31:70:2B:70'), size(200,12)]),
  snapshot(c9, next_row,   [ size(640,480) ]),
  ebutton(l1,  next_row,
   [ btaddr('98:D3:31:70:2B:70'), size(200,12)]),
  ebutton(l2,  right,
   [ btaddr('98:D3:31:70:2B:70'), size(200,12)]),
  ebutton(p6, next_row,
   [ btaddr('98:D3:31:40:1D:A4'), size(5,5) ])
]).

darwin([
 lagoon(l1, next_row,
   [ btaddr('98:D3:31:70:2B:70'), temp(37.9), od(0.4), size(200,12)]),
 pumps(p6,  next_row,
   [ btaddr('98:D3:31:40:1D:A4'), size(5,5) ])
]).

main(Name) :-
     new(Dialog, dialog),
     call(Name, Components),
     maplist(create(Dialog), Components).

create(Dialog, Component) :-
	Component =.. [Type, Name, Position, Data],
	Class =.. [Type, Name],
	send(Dialog, append, new(G, Class), Position),
	trace,
	maplist(send(G), Data).

converse :-
	send(EB, cmd, 'i\n'),
	get(EB, reply, Reply),
	writeln(Reply).


disp_menu([]).
disp_menu([L|T]) :-
    disp_menu_line(L),
    disp_menu(T).

disp_menu_line([])    :- writeln('').
disp_menu_line([L|T]) :- disp_item(L), disp_menu_line(T).

disp_item(button(_,X)) :- write(' '),write(X),write(' ').
disp_item(label(_,X)) :- write(' '),write(X),write(' ').
adisp_item(image(_,X)) :- write(' '),write(X),write(' ').

initialize_rows([],_).
initialize_rows([R|Rs],W) :-
    initialize_row(R,W),
    initialize_rows(Rs,W).

initialize_row([],W) :-
    screen(_,Width,_H,_Location,_Mitems),
    NWid is Width - 30,
    new(Spacer, box(NWid,8)),
    send(W, append(Spacer,next_row)),
    send(Spacer, colour, blue),
    send(Spacer, fill_pattern, colour(blue)).
%    send(Spacer, displayed, @off).


initialize_row([I|Is],W) :-
    row_item(I,Pce),
    send(W, append(Pce,next_row)),
    continue_row(Is,W).

continue_row(  [],  _).
continue_row([I|Is],W) :-
    row_item(I,Pce),
    send(W, append(Pce,right)),
    continue_row(Is,W).

freeall :-
    catch( get(@gui, graphicals, Chain),
	   ( chain_list(Chain, CList), freeall(CList) ),
	    writeln(firsttime)).
	   
freeall([]).
freeall([H|T]) :- writeln(free(H)), free(H), freeall(T).


