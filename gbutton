#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

:- use_module(library(time)).
:- use_module(library(process)).
	
repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
             repeat1(N).

repeat1(1) :- !.
repeat1(_).
repeat1(N) :- M is N-1, repeat1(M).

:- (current_prolog_flag(arch,'i386-win32')->BT=foreign(plblue);BT=plblue),
   load_foreign_library(BT), writeln('plblue (BLUETOOTH) loaded').


:- pce_begin_class(snapshot, label).

variable(imageDirectory, name, get, "Current Image Path" ).
variable(imageFile,      name, get, "Current Image Filename" ).

initialise(Self, Label:[name]) :->
	"Initialise the image area"::
        send_super(Self, initialise(Label)),
	send(Self, size, size(640,480)),
	send(Self, slot, imageFile, 'opencvlevel.jpg'),
	send(Self, slot, imageDirectory, './'),
	new(I, image('./opencvlevel.jpg')),
	send(Self, selection, I).

image(Self, File:[name])      :->
	send(Self,slot,imageFile, File).

imageDirectory(Self, Path:[name]) :-> send(Self,slot,imageDirectory, Path).

shape(Self, W:[int], H:[int]) :->
	send(Self, size, size(W,H)).

update(Self) :->
	get(Self, imageDirectory, Path),
	get(Self, imageFile, Filename),
	concat_atom([Path,Filename], Where),
	new(I, image(Where)),
	send(Self, selection, I).
:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(socket,  int, get, "Bluetooth Socket" ).
variable(btaddr, name, get, "Bluetooth MAC Address" ).
variable(reply, name, get, "Last Message from Device" ).

% Current Settings
variable(od600,       real, get, "Optical Density (600nM)").
variable(temperature, real, get, "Temperature").

% Target Settings
variable(od600_t,       real, get, "Target Optical Density (600nM)").
variable(temperature_t, real, get, "Target Temperature").

initialise(B, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(B, initialise(Label)),
	send(B, slot, temperature_t, 37.0),
	send(B, slot, od600_t, 0.4),
	send(B, slot, temperature, 0.0),
	send(B, slot, od600, 0.0),
	send(B, slot, socket, -1),
	send(B, slot, btaddr, discover).


mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(green,  _, orange) :- !.
mix_colors( _, green, orange).

compute(_) :-> true.

shape(Self, W:[int], H:[int]) :->
	   send(Self, size(size(W,H))).

od(Self, OD600:[real]) :->
	 send(Self, slot, od600, OD600).

temp(Self, Temp:[real]) :->
	 send(Self, slot, temperature, Temp).

command(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply"::
        get(Self, socket, Socket),
	( bt_converse(Socket, Cmd, Reply)
	  -> send(Self, slot, reply, Reply)
	  ; send(Self, slot, reply, failed)
	).

btaddr(Self, Addr:[name]) :->
	send(Self, slot, btaddr, Addr),
	send(Self, connect).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, btaddr, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(Addr, BTSocket),
	( BTSocket > -1; sleep(1),fail ),
	!, % Don't need the cut, methods are deterministic
	send(Self, slot, socket, BTSocket).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

mac(Self, MAC:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, ip, ip(IP)).

bt(Self, BtAddr) :->
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(BtAddr,Socket),
	( Socket > -1; sleep(1),fail ),
	!,
	send(Self,slot,socket,Socket).

:- pce_end_class.

:- pce_begin_class(cellstat, ebutton).

update(Self) :->
        get(Self,slot,temperature_t,Target),
        get(Self,slot,temperature,Temp),
	range_color(Target, Temp, Tc),
        get(Self,slot,od600_t,ODTarget),
        get(Self,slot,od600,OD),
	range_color(ODTarget, OD, ODc),
	mix_colors(Tc,ODc,Color),
	send(Self, colour(Color)),
        concat_atom(['\nTemperature: ', Target, ' / ',Temp,'\n\n',
 		'Turbidity:  ', ODTarget,' / ', OD, '\n'], Label),
	send(Self, label, Label).

:- pce_end_class.

:- pce_begin_class(lagoon, ebutton).

variable(fluorescence,real, get, "Fluorescence").
variable(fluorescence_t, real, get, "Target Fluorescence").

initialise(B, Label:[name]) :->
	"Initialise the lagoon"::
        send_super(B, initialise(Label)),
	send(B, slot, fluorescence_t, 0.2),
	send(B, slot, fluorescence, 0.0).

update(Self) :-> 
        get(Self,slot,temperature_t,Target),
        get(Self,slot,temperature,Temp),
	range_color(Target, Temp, Color),
	send(Self, colour(Color)),

        get(Self,slot,fluorescence_t,LuxTarget),
        get(Self,slot,fluorescence,Lux),
        concat_atom(['Temperature\n', Target, 'C / ',Temp,' C\n',
	'Lux : ', LuxTarget, ' / ', Lux, 'lm' ], Label),
	send(Self, label, Label).

:- pce_end_class.

:- pce_begin_class(pumps, ebutton).

update(_Self) :-> true.

:- pce_end_class.


:- pce_begin_class(sampler, ebutton).

update(_Self) :-> true.

:- pce_end_class.

:- pce_begin_class(spacer, box).

initialise(Self, _Name:[name]) :->
	screen(_,W,_H,_Pos),
	NWid is W - 30,
        send_super(Self, initialise(NWid, 10)),
	send(Self, colour, colour(black)),
	send(Self, fill_pattern, colour(black)).

color(Self, Color) :->
	send(Self, colour, colour(Color)),
	send(Self, fill_pattern, colour(Color)).

update(_Self) :-> true.

:- pce_end_class.
