#!/usr/bin/xpce
:- use_module(library(time)).
:- use_module(library(pce)).
:- use_module(library(process)).
:- use_module(library(charsio)).
:- use_module(library(helpidx)).
:- use_module(library(lists)).
:- use_module(library(ctypes)).

:- use_module(library(time)).
:- use_module(library(process)).

:- dynamic tog/1.


snapshot(Path, FileName) :-
	directory_files(Path,FileList),
	member(IFile,FileList),
	atom_codes(IFile,ICs),
	append("mypic",_,ICs),
	concat_atom([Path,IFile],FileName),
	!.
snapshot(Path, Filename) :-
	concat_atom([Path,'opencvlevel.jpg'], Filename).


% WGET will use alternate filenames so we update Image properly
% and are never caught reading a file that hasn't been fully written

toggle('mypic1.jpg','mypic2.jpg') :- tog(2), retract(tog(2)),assert(tog(1)).
toggle('mypic2.jpg', 'mypic1.jpg') :- tog(1), retract(tog(1)),assert(tog(2)).

wget( OtherFile,
      '/usr/bin/wget',
      ['-q', '-O',File,
      'http://192.168.2.117:88/cgi-bin/CGIProxy.fcgi?cmd=snapPicture2&usr=scrapsec&pwd=lakewould']):-
      toggle(File,OtherFile).

repeat(N) :-
             integer(N), % type check
             N>0,        % value check 
             repeat1(N).

repeat1(1) :- !.
repeat1(_).
repeat1(N) :- M is N-1, repeat1(M).

:- (current_prolog_flag(arch,'i386-win32')->BT=foreign(plblue);BT=plblue),
   load_foreign_library(BT), writeln('plblue (BLUETOOTH) loaded').


:- pce_begin_class(snapshot, label).

variable(imageDirectory, name, get, "Current Image Path" ).
variable(imageFile,      name, get, "Current Image Filename" ).

initialise(Self, Label:[name]) :->
	"Initialise the image area"::
        send_super(Self, initialise(Label)),
	send(Self, size, size(650,480)),
	snapshot('./',File),
	writeln(snapshot(File)),
	send(Self, slot, imageFile, File),
	send(Self, slot, imageDirectory, './'),
	new(I, image(File)),
	send(Self, selection, I),
	assert(tog(1)).

image(Self, File:[name])      :->
	send(Self,slot,imageFile, File).

imageDirectory(Self, Path:[name]) :-> send(Self,slot,imageDirectory, Path).

shape(Self, W:[int], H:[int]) :->
	send(Self, size, size(W,H)).

update(Self) :->
	get(Self, imageDirectory, Path),
	snapshot(Path, File),
	new(I, image(File)),
	send(Self,selection,I).

:- pce_end_class.

:- pce_begin_class(ebutton, button).

variable(socket,  int, get, "Bluetooth Socket" ).
variable(btaddr, name, get, "Bluetooth MAC Address" ).
variable(reply, name, get, "Last Message from Device" ).

% Current Settings
variable(od600,       real, get, "Optical Density (600nM)").
variable(temperature, real, get, "Temperature").

% Target Settings
variable(od600_t,       real, get, "Target Optical Density (600nM)").
variable(temperature_t, real, get, "Target Temperature").

initialise(B, Label:[name]) :->
	"Initialise the button and connect to device"::
        send_super(B, initialise(Label)),
	send(B, slot, temperature_t, 37.0),
	send(B, slot, od600_t, 0.4),
	send(B, slot, temperature, 0.0),
	send(B, slot, od600, 0.0),
	send(B, slot, socket, -1),
	send(B, slot, btaddr, discover).


mix_colors(   C,   C,      C) :- !.
mix_colors(   _,blue, purple) :- !.
mix_colors(blue,   _, purple) :- !.
mix_colors(green,  _, orange) :- !.
mix_colors( _, green, orange).

compute(_) :-> true.

shape(Self, W:[int], H:[int]) :->
	   send(Self, size(size(W,H))).

od(Self, OD600:[real]) :->
	 send(Self, slot, od600, OD600).

temp(Self, Temp:[real]) :->
	 send(Self, slot, temperature, Temp).

command(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply"::
        get(Self, socket, Socket),
	( bt_converse(Socket, Cmd, Reply)
	  -> send(Self, slot, reply, Reply)
	  ; send(Self, slot, reply, failed)
	).

btaddr(Self, Addr:[name]) :->
	send(Self, slot, btaddr, Addr),
	send(Self, connect).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, btaddr, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(Addr, BTSocket),
	( BTSocket > -1; sleep(1),fail ),
	!, % Don't need the cut, methods are deterministic
	send(Self, slot, socket, BTSocket).

insertIP(Cmd, IP, Result) :-
        atom_codes(Cmd, Cs),
        atom_codes(IP, ICs),
	[AT] = "@",
        append(Front,[AT|Rest],Cs),
	flatten([Front,ICs,Rest],CommandCs),
	atom_codes(Result,CommandCs).

ip(Self, IP:[name]) :->
	 socket(IP, Socket),
	 send(Self, slot, ipsocket, Socket).

mac_wget(Self, MAC:[name], Cmd:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, wget, wget(IP, Cmd)).

wget(Self, IP:[name], Cmd:[name]) :->
        insertIP(Cmd,IP,Command),
	send(Self, slot, wget, Command).

mac(Self, MAC:[name]) :->
        getIPfromMAC(MAC,IP),
	send(Self, ip, ip(IP)).

bt(Self, BtAddr) :->
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(BtAddr,Socket),
	( Socket > -1; sleep(1),fail ),
	!,
	send(Self,slot,socket,Socket).

:- pce_end_class.

:- pce_begin_class(cellstat, ebutton).

update(Self) :->
        get(Self,slot,temperature_t,Target),
        get(Self,slot,temperature,Temp),
	range_color(Target, Temp, Tc),
        get(Self,slot,od600_t,ODTarget),
        get(Self,slot,od600,OD),
	range_color(ODTarget, OD, ODc),
	mix_colors(Tc,ODc,Color),
	send(Self, colour(Color)),
        concat_atom(['\nTemperature: ', Target, ' / ',Temp,'\n',
 		'Turbidity:  ', ODTarget,' / ', OD, '\n'], Label),
	send(Self, label, Label).

:- pce_end_class.

:- pce_begin_class(lagoon, ebutton).

variable(fluorescence,real, get, "Fluorescence").
variable(fluorescence_t, real, get, "Target Fluorescence").
variable(level,real, get, "Level").
variable(level_t, real, get, "Target Level").

initialise(Self, Label:[name]) :->
	"Initialise the lagoon"::
        send_super(Self, initialise(Label)),
	send(Self, slot, level, 0.0),
	send(Self, slot, level_t, 0.3),
	send(Self, slot, fluorescence_t, 0.2),
	send(Self, slot, fluorescence, 0.0).

setLevel(Self,Level) :->
       send(Self, slot, level, Level).

update(Self) :-> 
        get(Self,slot,level,Level),
        get(Self,slot,temperature,Temp),
        get(Self,slot,temperature_t,Target),
	range_color(Target, Temp, Color),
	send(Self, colour(Color)),
        get(Self,slot,fluorescence_t,LuxTarget),
        get(Self,slot,fluorescence,Lux),
	format(atom(Level2), '~4g', [Level]),
        concat_atom(['Level ', Level2, '%\n',
	             'Temp  ', Target, 'C / ',Temp,' C\n',
                     'Lux   ', LuxTarget, ' / ', Lux, 'lm' ], Label),
	send(Self, label, Label).

:- pce_end_class.

:- pce_begin_class(sampler, ebutton).

initialise(Self, Label:[name]) :->
	"Initialise the lagoon"::
        send_super(Self, initialise(Label)).

update(Self) :->
	( tog(1) ->
	   send(Self, colour, colour(black))
	;
	   send(Self, colour, colour(blue))
	).

:- pce_end_class.

:- pce_begin_class(spacer, box).

initialise(Self, _Name:[name]) :->
	screen(_,W,_H,_Pos),
	NWid is W - 30,
        send_super(Self, initialise(NWid, 6)),
	send(Self, colour, colour(black)),
	send(Self, fill_pattern, colour(black)).

color(Self, Color) :->
	send(Self, colour, colour(Color)),
	send(Self, fill_pattern, colour(Color)).

update(_Self) :-> true.

:- pce_end_class.

:- pce_begin_class(pumps, dialog_group, "Pump Rail").

variable(socket,  int, get, "Bluetooth Socket" ).
variable(btaddr, name, get, "Bluetooth MAC Address" ).
variable(reply, name, get, "Last Message from Device" ).

initialise(Self,Label:[name]) :->
	"Initialise the window and fill it"::
        send_super(Self,initialise(Label)),
	send(Self, size,size(600,84)),
	send(Self, slot, socket, -1),
	send(Self, slot, btaddr, discover),
        ( childName(pump, 5, PName),
          free(@PName),
	  new(@PName, pump(PName)),
          (PName='pump1' -> Align=next_row ; Align=right ),
	  send(Self, append(@PName,Align)),
          fail
        ; true
        ).

childName(Root, Num, C) :-
	between(1, Num, N),
	concat_atom([Root,N],C).

update(_Self) :->
        ( childName(pump, 5, PName),
	  send(@PName,update),
          fail
        ; true
        ).

ok(Self) :->
        send(Self,return(ok)).

cancel(Self) :->
        send(Self,return(notok)),
        halt.

prompt(W, Value:name) :<-
        "Open it, destroy it and return the result"::
        get(W,confirm,Value).

% Bluetooth Connectivity
command(Self, Cmd) :->
	"Send command to Bluetooth Socket and save Reply"::
        get(Self, socket, Socket),
	( bt_converse(Socket, Cmd, Reply)
	  -> send(Self, slot, reply, Reply)
	  ; send(Self, slot, reply, failed)
	).

btaddr(Self, Addr:[name]) :->
	send(Self, slot, btaddr, Addr),
	send(Self, connect).

connect(Self) :->
	"Connect (or re-connect) the Bluetooth channel"::
	get(Self, btaddr, Addr),
	get(Self, socket, OldSocket),
        ( OldSocket > -1 -> bt_close(OldSocket) ; true),
	repeat(5),
		bt_socket(Addr, BTSocket),
	( BTSocket > -1; sleep(1),fail ),
	!, % Don't need the cut, methods are deterministic
	send(Self, slot, socket, BTSocket).

:- pce_end_class.

:- pce_begin_class(pump, dialog_group).
variable(pumpStatus, name, get, "Pump/Valve status").
variable(pumpButton, any, get, "Pump Button").

variable(pumpStatus, any, get, "Pump Status Box").
variable(valveStatus, any, get, "Valve Status Box").

initialise(Self, Label:[name]) :->
        "Initialise the Pump"::
        send_super(Self, initialise(Label)),
	send(Self, size,size(100,60)),
	send(Self, slot, pumpStatus,'Off / Closed'),

	concat_atom([Label,'b'],Button),
        free(@Button),
	new(@Button,button(pumpb)),
        send(@Button,label,'Off/Closed'),
        send(@Button,colour,colour(red)),
	send(Self, slot, pumpButton, @Button),
        send(Self, append(@Button)),

	concat_atom([Label,'p'],PStatus),
        new(@PStatus, hotbox(blue)),
	send(Self, append(@PStatus,next_row)),
	send(Self, slot, pumpStatus, @PStatus),

	concat_atom([Label,'v'],VStatus),
        new(@VStatus, hotbox(red)),
	send(Self, slot, valveStatus, @VStatus),
	send(Self, append(@VStatus,right)).

update(Self) :->
	random_permutation([pumpon,pumpoff,valveopen,valveclosed],[G|_]),
	send(Self, G).

pumpb(Self) :->
	get(Self, label, MyName),
	(MyName = 'Pump3' -> halt ; true),
	atom_codes(MyName,[_,_,_,_|NCs]),
	number_codes(PN,NCs),
	writeln(pressedpumpb(PN)).

shape(Self, W:[int], H:[int]) :->
	send(Self, size, size(W,H)).

font(_Self, _Font:[any]) :-> true.

pumpon(Self) :->
	get(Self, pumpStatus, Box),
        send(Box, fill_pattern, colour(red)).

pumpoff(Self) :->
	get(Self, pumpStatus, Box),
        send(Box, fill_pattern, colour(blue)).

valveopen(Self) :->
	get(Self, valveStatus, Box),
        send(Box, fill_pattern, colour(orange)).

valveclosed(Self) :->
	get(Self, valveStatus, Box),
        send(Box, fill_pattern, colour(black)).

:- pce_end_class.


:- pce_begin_class(hotbox, box).
initialise(Self, Color:[name]) :->
        "Initialise the lagoon"::
        send_super(Self, initialise(30,10)),
	send(Self, colour, colour(black)),
        send(Self, fill_pattern, colour(Color)).
:- pce_end_class.
